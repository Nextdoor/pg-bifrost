// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nextdoor/pg-bifrost.git/transport (interfaces: Batch,BatchFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	marshaller "github.com/Nextdoor/pg-bifrost.git/marshaller"
	transport "github.com/Nextdoor/pg-bifrost.git/transport"
	ordered_map "github.com/cevaris/ordered_map"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBatch is a mock of Batch interface
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockBatch) Add(arg0 *marshaller.MarshalledMessage) (bool, error) {
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockBatchMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBatch)(nil).Add), arg0)
}

// Close mocks base method
func (m *MockBatch) Close() (bool, error) {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close
func (mr *MockBatchMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBatch)(nil).Close))
}

// CreateTime mocks base method
func (m *MockBatch) CreateTime() int64 {
	ret := m.ctrl.Call(m, "CreateTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateTime indicates an expected call of CreateTime
func (mr *MockBatchMockRecorder) CreateTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTime", reflect.TypeOf((*MockBatch)(nil).CreateTime))
}

// GetPartitionKey mocks base method
func (m *MockBatch) GetPartitionKey() string {
	ret := m.ctrl.Call(m, "GetPartitionKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPartitionKey indicates an expected call of GetPartitionKey
func (mr *MockBatchMockRecorder) GetPartitionKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionKey", reflect.TypeOf((*MockBatch)(nil).GetPartitionKey))
}

// GetPayload mocks base method
func (m *MockBatch) GetPayload() interface{} {
	ret := m.ctrl.Call(m, "GetPayload")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetPayload indicates an expected call of GetPayload
func (mr *MockBatchMockRecorder) GetPayload() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockBatch)(nil).GetPayload))
}

// GetPayloadByteSize mocks base method
func (m *MockBatch) GetPayloadByteSize() int64 {
	ret := m.ctrl.Call(m, "GetPayloadByteSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetPayloadByteSize indicates an expected call of GetPayloadByteSize
func (mr *MockBatchMockRecorder) GetPayloadByteSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadByteSize", reflect.TypeOf((*MockBatch)(nil).GetPayloadByteSize))
}

// GetTransactions mocks base method
func (m *MockBatch) GetTransactions() *ordered_map.OrderedMap {
	ret := m.ctrl.Call(m, "GetTransactions")
	ret0, _ := ret[0].(*ordered_map.OrderedMap)
	return ret0
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockBatchMockRecorder) GetTransactions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockBatch)(nil).GetTransactions))
}

// IsEmpty mocks base method
func (m *MockBatch) IsEmpty() bool {
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockBatchMockRecorder) IsEmpty() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockBatch)(nil).IsEmpty))
}

// IsFull mocks base method
func (m *MockBatch) IsFull() bool {
	ret := m.ctrl.Call(m, "IsFull")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFull indicates an expected call of IsFull
func (mr *MockBatchMockRecorder) IsFull() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFull", reflect.TypeOf((*MockBatch)(nil).IsFull))
}

// ModifyTime mocks base method
func (m *MockBatch) ModifyTime() int64 {
	ret := m.ctrl.Call(m, "ModifyTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ModifyTime indicates an expected call of ModifyTime
func (mr *MockBatchMockRecorder) ModifyTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyTime", reflect.TypeOf((*MockBatch)(nil).ModifyTime))
}

// NumMessages mocks base method
func (m *MockBatch) NumMessages() int {
	ret := m.ctrl.Call(m, "NumMessages")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumMessages indicates an expected call of NumMessages
func (mr *MockBatchMockRecorder) NumMessages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumMessages", reflect.TypeOf((*MockBatch)(nil).NumMessages))
}

// MockBatchFactory is a mock of BatchFactory interface
type MockBatchFactory struct {
	ctrl     *gomock.Controller
	recorder *MockBatchFactoryMockRecorder
}

// MockBatchFactoryMockRecorder is the mock recorder for MockBatchFactory
type MockBatchFactoryMockRecorder struct {
	mock *MockBatchFactory
}

// NewMockBatchFactory creates a new mock instance
func NewMockBatchFactory(ctrl *gomock.Controller) *MockBatchFactory {
	mock := &MockBatchFactory{ctrl: ctrl}
	mock.recorder = &MockBatchFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchFactory) EXPECT() *MockBatchFactoryMockRecorder {
	return m.recorder
}

// NewBatch mocks base method
func (m *MockBatchFactory) NewBatch(arg0 string) transport.Batch {
	ret := m.ctrl.Call(m, "NewBatch", arg0)
	ret0, _ := ret[0].(transport.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockBatchFactoryMockRecorder) NewBatch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockBatchFactory)(nil).NewBatch), arg0)
}

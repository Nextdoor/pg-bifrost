// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nextdoor/pg-bifrost.git/replication/client/conn (interfaces: ManagerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	conn "github.com/Nextdoor/pg-bifrost.git/replication/client/conn"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManagerInterface is a mock of ManagerInterface interface
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockManagerInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockManagerInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManagerInterface)(nil).Close))
}

// GetConn mocks base method
func (m *MockManagerInterface) GetConn(arg0 context.Context) (conn.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", arg0)
	ret0, _ := ret[0].(conn.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn
func (mr *MockManagerInterfaceMockRecorder) GetConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockManagerInterface)(nil).GetConn), arg0)
}

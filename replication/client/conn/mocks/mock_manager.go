// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nextdoor/pg-bifrost.git/replication/client/conn (interfaces: ManagerInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_manager.go -package=mocks github.com/Nextdoor/pg-bifrost.git/replication/client/conn ManagerInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	conn "github.com/Nextdoor/pg-bifrost.git/replication/client/conn"
	gomock "go.uber.org/mock/gomock"
)

// MockManagerInterface is a mock of ManagerInterface interface.
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface.
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance.
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockManagerInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockManagerInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManagerInterface)(nil).Close))
}

// GetConn mocks base method.
func (m *MockManagerInterface) GetConn(ctx context.Context) (conn.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", ctx)
	ret0, _ := ret[0].(conn.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn.
func (mr *MockManagerInterfaceMockRecorder) GetConn(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockManagerInterface)(nil).GetConn), ctx)
}

// GetConnWithStartLsn mocks base method.
func (m *MockManagerInterface) GetConnWithStartLsn(ctx context.Context, startLsn uint64) (conn.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnWithStartLsn", ctx, startLsn)
	ret0, _ := ret[0].(conn.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnWithStartLsn indicates an expected call of GetConnWithStartLsn.
func (mr *MockManagerInterfaceMockRecorder) GetConnWithStartLsn(ctx, startLsn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnWithStartLsn", reflect.TypeOf((*MockManagerInterface)(nil).GetConnWithStartLsn), ctx, startLsn)
}

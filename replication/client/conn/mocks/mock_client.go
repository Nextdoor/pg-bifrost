// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nextdoor/pg-bifrost.git/replication/client/conn (interfaces: Conn)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx"
	reflect "reflect"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// CreateReplicationSlot mocks base method
func (m *MockConn) CreateReplicationSlot(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "CreateReplicationSlot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReplicationSlot indicates an expected call of CreateReplicationSlot
func (mr *MockConnMockRecorder) CreateReplicationSlot(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSlot", reflect.TypeOf((*MockConn)(nil).CreateReplicationSlot), arg0, arg1)
}

// DropReplicationSlot mocks base method
func (m *MockConn) DropReplicationSlot(arg0 string) error {
	ret := m.ctrl.Call(m, "DropReplicationSlot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropReplicationSlot indicates an expected call of DropReplicationSlot
func (mr *MockConnMockRecorder) DropReplicationSlot(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReplicationSlot", reflect.TypeOf((*MockConn)(nil).DropReplicationSlot), arg0)
}

// IsAlive mocks base method
func (m *MockConn) IsAlive() bool {
	ret := m.ctrl.Call(m, "IsAlive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlive indicates an expected call of IsAlive
func (mr *MockConnMockRecorder) IsAlive() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockConn)(nil).IsAlive))
}

// SendStandbyStatus mocks base method
func (m *MockConn) SendStandbyStatus(arg0 *pgx.StandbyStatus) error {
	ret := m.ctrl.Call(m, "SendStandbyStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStandbyStatus indicates an expected call of SendStandbyStatus
func (mr *MockConnMockRecorder) SendStandbyStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStandbyStatus", reflect.TypeOf((*MockConn)(nil).SendStandbyStatus), arg0)
}

// StartReplication mocks base method
func (m *MockConn) StartReplication(arg0 string, arg1 uint64, arg2 int64, arg3 ...string) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReplication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartReplication indicates an expected call of StartReplication
func (mr *MockConnMockRecorder) StartReplication(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplication", reflect.TypeOf((*MockConn)(nil).StartReplication), varargs...)
}

// WaitForReplicationMessage mocks base method
func (m *MockConn) WaitForReplicationMessage(arg0 context.Context) (*pgx.ReplicationMessage, error) {
	ret := m.ctrl.Call(m, "WaitForReplicationMessage", arg0)
	ret0, _ := ret[0].(*pgx.ReplicationMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForReplicationMessage indicates an expected call of WaitForReplicationMessage
func (mr *MockConnMockRecorder) WaitForReplicationMessage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReplicationMessage", reflect.TypeOf((*MockConn)(nil).WaitForReplicationMessage), arg0)
}

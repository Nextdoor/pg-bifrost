// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nextdoor/pg-bifrost.git/replication/client/conn (interfaces: Conn)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_client.go -package=mocks github.com/Nextdoor/pg-bifrost.git/replication/client/conn Conn
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pglogrepl "github.com/jackc/pglogrepl"
	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
	gomock "go.uber.org/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
	isgomock struct{}
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close), ctx)
}

// CreateReplicationSlot mocks base method.
func (m *MockConn) CreateReplicationSlot(ctx context.Context, slotName, outputPlugin string, options pglogrepl.CreateReplicationSlotOptions) (pglogrepl.CreateReplicationSlotResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationSlot", ctx, slotName, outputPlugin, options)
	ret0, _ := ret[0].(pglogrepl.CreateReplicationSlotResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationSlot indicates an expected call of CreateReplicationSlot.
func (mr *MockConnMockRecorder) CreateReplicationSlot(ctx, slotName, outputPlugin, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSlot", reflect.TypeOf((*MockConn)(nil).CreateReplicationSlot), ctx, slotName, outputPlugin, options)
}

// DropReplicationSlot mocks base method.
func (m *MockConn) DropReplicationSlot(ctx context.Context, slotName string, options pglogrepl.DropReplicationSlotOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropReplicationSlot", ctx, slotName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropReplicationSlot indicates an expected call of DropReplicationSlot.
func (mr *MockConnMockRecorder) DropReplicationSlot(ctx, slotName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReplicationSlot", reflect.TypeOf((*MockConn)(nil).DropReplicationSlot), ctx, slotName, options)
}

// IdentifySystem mocks base method.
func (m *MockConn) IdentifySystem(ctx context.Context) (pglogrepl.IdentifySystemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifySystem", ctx)
	ret0, _ := ret[0].(pglogrepl.IdentifySystemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentifySystem indicates an expected call of IdentifySystem.
func (mr *MockConnMockRecorder) IdentifySystem(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifySystem", reflect.TypeOf((*MockConn)(nil).IdentifySystem), ctx)
}

// IsClosed mocks base method.
func (m *MockConn) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConn)(nil).IsClosed))
}

// ReceiveMessage mocks base method.
func (m *MockConn) ReceiveMessage(ctx context.Context) (pgproto3.BackendMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", ctx)
	ret0, _ := ret[0].(pgproto3.BackendMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockConnMockRecorder) ReceiveMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockConn)(nil).ReceiveMessage), ctx)
}

// SendStandbyStatus mocks base method.
func (m *MockConn) SendStandbyStatus(ctx context.Context, status pglogrepl.StandbyStatusUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStandbyStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStandbyStatus indicates an expected call of SendStandbyStatus.
func (mr *MockConnMockRecorder) SendStandbyStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStandbyStatus", reflect.TypeOf((*MockConn)(nil).SendStandbyStatus), ctx, status)
}

// StartReplication mocks base method.
func (m *MockConn) StartReplication(ctx context.Context, slotName string, startLSN pglogrepl.LSN, options pglogrepl.StartReplicationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplication", ctx, slotName, startLSN, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartReplication indicates an expected call of StartReplication.
func (mr *MockConnMockRecorder) StartReplication(ctx, slotName, startLSN, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplication", reflect.TypeOf((*MockConn)(nil).StartReplication), ctx, slotName, startLSN, options)
}

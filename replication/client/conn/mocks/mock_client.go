// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nextdoor/pg-bifrost.git/replication/client/conn (interfaces: Conn)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pglogrepl "github.com/jackc/pglogrepl"
	v2 "github.com/jackc/pgproto3/v2"
	reflect "reflect"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConn) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close), arg0)
}

// CreateReplicationSlot mocks base method
func (m *MockConn) CreateReplicationSlot(arg0 context.Context, arg1, arg2 string, arg3 pglogrepl.CreateReplicationSlotOptions) (pglogrepl.CreateReplicationSlotResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationSlot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(pglogrepl.CreateReplicationSlotResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationSlot indicates an expected call of CreateReplicationSlot
func (mr *MockConnMockRecorder) CreateReplicationSlot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSlot", reflect.TypeOf((*MockConn)(nil).CreateReplicationSlot), arg0, arg1, arg2, arg3)
}

// DropReplicationSlot mocks base method
func (m *MockConn) DropReplicationSlot(arg0 context.Context, arg1 string, arg2 pglogrepl.DropReplicationSlotOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropReplicationSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropReplicationSlot indicates an expected call of DropReplicationSlot
func (mr *MockConnMockRecorder) DropReplicationSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReplicationSlot", reflect.TypeOf((*MockConn)(nil).DropReplicationSlot), arg0, arg1, arg2)
}

// IdentifySystem mocks base method
func (m *MockConn) IdentifySystem(arg0 context.Context) (pglogrepl.IdentifySystemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifySystem", arg0)
	ret0, _ := ret[0].(pglogrepl.IdentifySystemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentifySystem indicates an expected call of IdentifySystem
func (mr *MockConnMockRecorder) IdentifySystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifySystem", reflect.TypeOf((*MockConn)(nil).IdentifySystem), arg0)
}

// IsClosed mocks base method
func (m *MockConn) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed
func (mr *MockConnMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConn)(nil).IsClosed))
}

// ReceiveMessage mocks base method
func (m *MockConn) ReceiveMessage(arg0 context.Context) (v2.BackendMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", arg0)
	ret0, _ := ret[0].(v2.BackendMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (mr *MockConnMockRecorder) ReceiveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockConn)(nil).ReceiveMessage), arg0)
}

// SendStandbyStatus mocks base method
func (m *MockConn) SendStandbyStatus(arg0 context.Context, arg1 pglogrepl.StandbyStatusUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStandbyStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStandbyStatus indicates an expected call of SendStandbyStatus
func (mr *MockConnMockRecorder) SendStandbyStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStandbyStatus", reflect.TypeOf((*MockConn)(nil).SendStandbyStatus), arg0, arg1)
}

// StartReplication mocks base method
func (m *MockConn) StartReplication(arg0 context.Context, arg1 string, arg2 pglogrepl.LSN, arg3 pglogrepl.StartReplicationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplication", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartReplication indicates an expected call of StartReplication
func (mr *MockConnMockRecorder) StartReplication(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplication", reflect.TypeOf((*MockConn)(nil).StartReplication), arg0, arg1, arg2, arg3)
}

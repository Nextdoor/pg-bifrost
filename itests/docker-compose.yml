services:
  postgres:
    profiles: ["all", "s3", "kinesis", "kafka", "test"]
    container_name: postgres
    build: containers/postgres
    volumes:
    - "./tests/${TEST_NAME}/input:/input"
    environment:
    - POSTGRES_PASSWORD=pgbifrost
    networks:
    - net

  localstack:
    profiles: ["all", "s3", "kinesis"]
    container_name: localstack
    image: localstack/localstack:2.0.2
    env_file:
    - "./containers/defaults.env"
    - "./tests/${TEST_NAME}/envfile.env"
    environment:
    - EAGER_SERVICE_LOADING=1
    - SERVICES=${TRANSPORT_SINK}
    ports:
    - ${LOCALSTACK_PORT}:${LOCALSTACK_PORT}
    restart: always
    networks:
    - net

  kafka:
    profiles: ["all", "kafka"]
    image: apache/kafka:3.8.0
    ports:
      - 9092:9092
      - 29092:29092
      - 9999:9999
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://127.0.0.1:9092,DOCKER://kafka:29092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://127.0.0.1:9092,DOCKER://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh  cluster-id --bootstrap-server localhost:9092 || exit -1
      start_period: 5s
      interval: 5s
      retries: 60
    networks:
      - net

  data-poller:
    profiles: ["all", "test"]
    container_name: data-poller
    build: containers/data-poller
    env_file:
    - "./containers/defaults.env"
    - "./tests/${TEST_NAME}/envfile.env"
    - "./contexts/${TRANSPORT_SINK}.env"
    networks:
      - net

  bifrost:
    profiles: ["all", "test"]
    container_name: bifrost
    image: pg-bifrost:latest
    depends_on:
    - postgres
    - data-poller
    env_file:
    - "./containers/defaults.env"
    - "./tests/${TEST_NAME}/envfile.env"
    - "./contexts/${TRANSPORT_SINK}.env"
    networks:
      - net
    command: /pg-bifrost replicate ${TRANSPORT_SINK}

networks:
  net:

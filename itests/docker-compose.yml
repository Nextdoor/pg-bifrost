version: '3'
services:
  postgres:
    profiles: ["all", "s3", "kinesis", "kafka", "test"]
    container_name: postgres
    build: containers/postgres
    volumes:
    - "./tests/${TEST_NAME}/input:/input"
    environment:
    - POSTGRES_PASSWORD=pgbifrost
    networks:
    - net

  localstack:
    profiles: ["all", "s3", "kinesis"]
    container_name: localstack
    image: localstack/localstack:2.0.2
    env_file:
    - "./containers/defaults.env"
    - "./tests/${TEST_NAME}/envfile.env"
    environment:
    - EAGER_SERVICE_LOADING=1
    - SERVICES=${TRANSPORT_SINK}
    ports:
    - ${LOCALSTACK_PORT}:${LOCALSTACK_PORT}
    restart: always
    networks:
    - net

  zoo1:
    profiles: ["all", "kafka" ]
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - net

  kafka1:
    profiles: ["all", "kafka"]
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - net

  data-poller:
    profiles: ["all", "test"]
    container_name: data-poller
    build: containers/data-poller
    env_file:
    - "./containers/defaults.env"
    - "./tests/${TEST_NAME}/envfile.env"
    - "./contexts/${TRANSPORT_SINK}.env"
    networks:
      - net

  bifrost:
    profiles: ["all", "test"]
    container_name: bifrost
    image: pg-bifrost:latest
    depends_on:
    - postgres
    - data-poller
    env_file:
    - "./containers/defaults.env"
    - "./tests/${TEST_NAME}/envfile.env"
    - "./contexts/${TRANSPORT_SINK}.env"
    networks:
      - net
    command: /pg-bifrost replicate ${TRANSPORT_SINK}

networks:
  net:
